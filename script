const carArray = [
    {
        brand: 'Mazda',
        model: '3',
        trim: 'base',
        year: 2022,
        drive: ['FWD', 'AWD'],
        LKA: true,
        laneCenter: false,
        handsFree: false,
        style: ['sedan'],
        zeroSixty: 7.5 
    },
    {
        brand: 'Ford',
        model: 'Mustang Mach E',
        trim: 'base',
        year: 2022,
        drive: ['fwd', 'awd'],
        LKA: true,
        laneCenter: true,
        handsFree: true,
        style: ['suv'],
        zeroSixty: 3.7 
    },
    {
        brand: 'KIA',
        model: 'Forte',
        trim: 'GT',
        year: 2022,
        drive: ['fwd'],
        LKA: true,
        laneCenter: true,
        handsFree: false,
        style: ['sedan'],
        zeroSixty: 6.4 
    },
];

const userCar = {
        brand: undefined,
        model: undefined,
        trim: undefined,
        year: 2022,
        drive: ['fwd', 'awd'],
        LKA: true,
        laneCenter: undefined,
        handsFree: undefined,
        style: ['suv', 'sedan', 'truck', 'electric', 'hatchback', 'hybrid'],
        zeroSixty: 7 
};

/*
// First we make a function that lets us check that defined properties match.
// First, use Object.entries to get an array of all keys and values, which looks like this:
// [['brand', 'Mazda']
// ['model', '3']
// ['trim', 'base']
// ['year', 2022]
// ['drive', Array(2)]
// ['LKA', true]
// ['laneCenter', false]
// ['handsFree', false]
// ['style', 'sedan']
// ['zeroSixty', 7.5]]

// Now we can use the key to get values from the user car. Since undefined counts as a match, we check
// that every value for a given key is either undefined or matches the user car's value.
// That all happens in the below function:
function filterToDefinedAndMatching(car) {
	return Object.entries(car).every(([key, value]) => !userCar[key] || userCar[key] == value);
}

// Now that we have a function that can determing if a single car matches the user car, we can
// simply pass it into carArray.filter:
const matchingCars = carArray.filter(filterToDefinedAndMatching);

// This works, however, you will have a problem when you get to the drive property, because it's an array
console.log(matchingCars);

// Add the fords drive:
//userCar.drive = ['FWD', 'AWD'];

// This will log an empty array:
//console.log(carArray.filter(filterToDefinedAndMatching));

// This is because equality on arrays checks if they are the same array, not if their contents are the same.
// The ford's drive array is created on line 19, the users on line 81, so they are not the same but two separate
// arrays with the same contents. Look into value vs reference if you don't understand this. So to fix this,
// we need a deeper level of checking: */
function betterFilterToMatchCars(car) {
  return Object.entries(car).every(([key, value]) => {
    const userCarValue = userCar[key];

  	if (Array.isArray(userCarValue)) {
			return userCarValue.some(item => value.includes(item));
		} else if (typeof userCarValue === 'number') {
			return userCarValue >= value;
		} else {
      return !userCarValue || userCarValue == value;
    }
  });
}

// Now you can match on drive as well
console.log(carArray.filter(betterFilterToMatchCars));

// If your car objects get more complex, you should just look into javascript deep equals:
// https://stackoverflow.com/questions/1068834/object-comparison-in-javascript